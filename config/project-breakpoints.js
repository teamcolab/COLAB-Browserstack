// Project to breakpoint mapping configuration
// Maps BrowserStack project names (platform-based) to specific breakpoints for visual regression testing
// Platform-first approach: macOS Tahoe = desktop breakpoints, iOS = mobile breakpoints, etc.
import breakpoints from './breakpoints.js';

// Define breakpoint references by name for easier mapping
const breakpointRefs = {
  mobile: breakpoints.find(bp => bp.name === 'Mobile Portrait'),
  tablet: breakpoints.find(bp => bp.name === 'Tablet'),
  desktop: breakpoints.find(bp => bp.name === 'Desktop Large')
};

// Project name patterns and their corresponding breakpoints
// These patterns should match the project names generated by BrowserStack
const projectBreakpointMap = {
  // macOS Tahoe platform - desktop browsers
  'tahoe': [breakpointRefs.mobile, breakpointRefs.tablet, breakpointRefs.desktop],
  'osx': [breakpointRefs.mobile, breakpointRefs.tablet, breakpointRefs.desktop],
  'macos': [breakpointRefs.mobile, breakpointRefs.tablet, breakpointRefs.desktop],
  
  // iOS platform - mobile browsers
  'ios': [breakpointRefs.mobile],
  'iphone': [breakpointRefs.mobile],
};

/**
 * Get breakpoints for a specific project based on platform
 * @param {string} projectName - The BrowserStack project name (e.g., "OS X Tahoe Chrome", "iOS Safari")
 * @returns {Array} Array of breakpoint objects appropriate for the platform
 */
export function getBreakpointsForProject(projectName) {
  if (!projectName) {
    console.warn('‚ö†Ô∏è  No project name provided, using all breakpoints');
    return breakpoints;
  }

  // Convert to lowercase for case-insensitive matching
  const projectLower = projectName.toLowerCase();
  
  // Find exact match first
  if (projectBreakpointMap[projectLower]) {
    console.log(`üéØ Found exact match for project: "${projectName}"`);
    return projectBreakpointMap[projectLower];
  }
  
  // Find partial match
  for (const [pattern, breakpointList] of Object.entries(projectBreakpointMap)) {
    if (projectLower.includes(pattern)) {
      console.log(`üîç Found partial match for project: "${projectName}" (pattern: "${pattern}")`);
      return breakpointList;
    }
  }
  
  // Default fallback - use all breakpoints
  console.warn(`‚ö†Ô∏è  No breakpoint mapping found for project: "${projectName}", using all breakpoints`);
  return breakpoints;
}

export default projectBreakpointMap;
